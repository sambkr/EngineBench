{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8304507,"sourceType":"datasetVersion","datasetId":4933238},{"sourceId":180462515,"sourceType":"kernelVersion"},{"sourceId":180463535,"sourceType":"kernelVersion"}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/samueljbaker/gaptester?scriptVersionId=180621047\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"Tutorial for testing different gap sizes and types for the 2D particle image velocimetry (PIV) data from the EngineBench dataset.\n\nFor more information, see https://eng.ox.ac.uk/tpsrg/research/enginebench/.","metadata":{}},{"cell_type":"markdown","source":"# Import libs and inspect structure of HDF5 file","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"import matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport h5py\nimport torch\n\nfrom torchvision import transforms\nfrom eb_data_loading import MichiganPIV, SheetGapHandler\nfrom eb_plotting import ColorQuiver, Loader2Plot","metadata":{"execution":{"iopub.status.busy":"2024-05-30T14:22:56.842111Z","iopub.execute_input":"2024-05-30T14:22:56.843074Z","iopub.status.idle":"2024-05-30T14:23:04.195673Z","shell.execute_reply.started":"2024-05-30T14:22:56.843035Z","shell.execute_reply":"2024-05-30T14:23:04.194367Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def print_h5(name, obj):\n    print(name)\n    for key, val in obj.attrs.items():\n        print(f\"    {key}: {val}\") # Print attributes","metadata":{"execution":{"iopub.status.busy":"2024-05-30T14:23:05.774537Z","iopub.execute_input":"2024-05-30T14:23:05.775079Z","iopub.status.idle":"2024-05-30T14:23:05.781525Z","shell.execute_reply.started":"2024-05-30T14:23:05.775043Z","shell.execute_reply":"2024-05-30T14:23:05.780175Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Inspect data structure\nprint('File structure:')\nfilepath = \"/kaggle/input/enginebench-lsp-small/LSP_r1300_p40_small.h5\"\n\nwith h5py.File(filepath, 'r') as f:\n    f.visititems(print_h5)","metadata":{"execution":{"iopub.status.busy":"2024-05-30T14:23:06.561047Z","iopub.execute_input":"2024-05-30T14:23:06.562243Z","iopub.status.idle":"2024-05-30T14:23:06.582078Z","shell.execute_reply.started":"2024-05-30T14:23:06.562184Z","shell.execute_reply":"2024-05-30T14:23:06.580955Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Set congifurations and load the dataset","metadata":{}},{"cell_type":"code","source":"# Configurations\nCFG = {}\nCFG['target_img_shape'] = (64,64)\nCFG['max_removal_fraction'] = 0.25 # Remove no more than 50% of the data\nCFG['gap_type'] = 'edge' # Edge sheet gaps\n# CFG['gap_type'] = 'central' # Central sheet gaps","metadata":{"execution":{"iopub.status.busy":"2024-05-30T14:35:59.717937Z","iopub.execute_input":"2024-05-30T14:35:59.718455Z","iopub.status.idle":"2024-05-30T14:35:59.724619Z","shell.execute_reply.started":"2024-05-30T14:35:59.718408Z","shell.execute_reply":"2024-05-30T14:35:59.723542Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Set the gap handler\nif CFG['gap_type'] == 'edge':\n    gap_handler = SheetGapHandler(seed=None,max_removal_fraction=CFG['max_removal_fraction'],central_sheet=False)\nelif CFG['gap_type'] == 'central':\n    gap_handler = SheetGapHandler(seed=None,max_removal_fraction=CFG['max_removal_fraction'],central_sheet=True)\nelse:\n    raise ValueError(\"Gap type not implemented\")\n\ntens_transform = transforms.ToTensor()\n\n# Select test point and crank angle\n# Dictionaries for different groups (test points), cads (crank angles), and train/val/test congifurations\ngrp_dict = {0: \"r1300_p40\", 1: \"r1300_p95\", 2: \"r0800_p95\"}  # Select test point\n\ncad_dict = {\n    0: \"cad090\",\n    1: \"cad135\",\n    2: \"cad180\",\n    3: \"cad225\",\n    4: \"cad270\",\n}  \n\n# First test point and first crank angle\ngrp_idx = 0\ncad_idx = 0\n\n# Create dataset\nds = MichiganPIV(\n            data_path=filepath,\n            grp_dict=grp_dict,\n            cad_dict=cad_dict,\n            grp_cad_idx=(grp_idx,cad_idx),\n            gap_handler=gap_handler,\n            target_img_shape=CFG[\"target_img_shape\"],\n            train=True,\n            transform=tens_transform,\n        )\n\nprint(f\"Number of PIV snapshots: {len(ds)}\")","metadata":{"execution":{"iopub.status.busy":"2024-05-30T14:36:29.1954Z","iopub.execute_input":"2024-05-30T14:36:29.195799Z","iopub.status.idle":"2024-05-30T14:36:29.220649Z","shell.execute_reply.started":"2024-05-30T14:36:29.195761Z","shell.execute_reply":"2024-05-30T14:36:29.21937Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Create data loader\ndata_loader = torch.utils.data.DataLoader(dataset=ds,batch_size=64,shuffle=False)\n\n# Retrieve first batch of images from data loader\nsnapshots, gappy_snapshots, masks, scales = next(iter(data_loader)) \nsnapshots.shape, gappy_snapshots.shape, masks.shape","metadata":{"execution":{"iopub.status.busy":"2024-05-30T14:36:39.865999Z","iopub.execute_input":"2024-05-30T14:36:39.866462Z","iopub.status.idle":"2024-05-30T14:36:42.05487Z","shell.execute_reply.started":"2024-05-30T14:36:39.866421Z","shell.execute_reply":"2024-05-30T14:36:42.053756Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Plot snapshot","metadata":{}},{"cell_type":"code","source":"# Visualise snapshot\nidx = 0 # Change this value to view other snapshots\n\nsnapu,snapv = Loader2Plot(snapshots[idx],ds.metadata)\ngappyu,gappyv = Loader2Plot(gappy_snapshots[idx],ds.metadata)\n\nnew_mask = masks[idx,0,...] # Mask showing locations of new gaps added\nold_mask = masks[idx,1,...] # Mask showing locations of original data points\ngappyu[(new_mask != 0) | (old_mask != 0)] = 0\ngappyv[(new_mask != 0) | (old_mask != 0)] = 0\nsnapu[old_mask != 0] = 0\nsnapv[old_mask != 0] = 0\n\nColorQuiver(ds.metadata['paddedx'],ds.metadata['paddedy'],snapu,snapv,auto_cbar=True)\nColorQuiver(ds.metadata['paddedx'],ds.metadata['paddedy'],gappyu,gappyv,auto_cbar=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-30T14:36:58.872836Z","iopub.execute_input":"2024-05-30T14:36:58.873254Z","iopub.status.idle":"2024-05-30T14:36:59.756825Z","shell.execute_reply.started":"2024-05-30T14:36:58.873197Z","shell.execute_reply":"2024-05-30T14:36:59.755535Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}